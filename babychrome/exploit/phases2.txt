Concurrent recompilation has been disabled for tracing.
0
[manually marking 0x2c1f082d0c49 <JSFunction hot (sfi = 0x2c1f082d0a85)> for non-concurrent optimization]
[compiling method 0x2c1f082d0c49 <JSFunction hot (sfi = 0x2c1f082d0a85)> (target TURBOFAN) using TurboFan]
---------------------------------------------------
Begin compiling method hot using TurboFan
--{Propagate phase}--
 visit #73: End (trunc: no-value-use)
  initial #92: no-value-use
 visit #92: Return (trunc: no-value-use)
  initial #59: truncate-to-word32
  initial #59: no-truncation (but distinguish zeros)
  initial #64: no-value-use
  initial #19: no-value-use
 visit #64: SpeculativeNumberBitwiseOr (trunc: no-value-use)
  initial #94: truncate-to-word32
  initial #59: no-truncation (but distinguish zeros)
  initial #89: no-value-use
  initial #19: no-value-use
 visit #89: SpeculativeToNumber (trunc: no-value-use)
  initial #29: no-truncation (but distinguish zeros)
  initial #83: no-value-use
  initial #19: no-value-use
 visit #83: SpeculativeToNumber (trunc: no-value-use)
  initial #29: no-truncation (but distinguish zeros)
  initial #82: no-value-use
  initial #19: no-value-use
 visit #82: CheckIf (trunc: no-value-use)
  initial #81: truncate-to-bool
  initial #79: no-value-use
  initial #19: no-value-use
 visit #81: ReferenceEqual (trunc: truncate-to-bool)
  initial #79: no-truncation (but distinguish zeros)
  initial #80: no-truncation (but distinguish zeros)
 visit #80: HeapConstant (trunc: no-truncation (but distinguish zeros))
 visit #79: LoadField (trunc: no-truncation (but distinguish zeros))
  initial #78: no-truncation (but distinguish zeros)
  initial #78: no-truncation (but distinguish zeros)
  initial #19: no-value-use
 visit #78: LoadField (trunc: no-truncation (but distinguish zeros))
  initial #77: no-truncation (but distinguish zeros)
  initial #29: no-truncation (but distinguish zeros)
  initial #19: no-value-use
 visit #77: HeapConstant (trunc: no-truncation (but distinguish zeros))
 visit #29: SpeculativeNumberEqual (trunc: no-truncation (but distinguish zeros))
  initial #28: no-truncation (but identify zeros)
  initial #15: no-truncation (but identify zeros)
  initial #28: no-truncation (but identify zeros)
  initial #19: no-value-use
 visit #28: SpeculativeSafeIntegerSubtract (trunc: no-truncation (but identify zeros))
  initial #23: no-truncation (but identify zeros)
  initial #24: no-truncation (but identify zeros)
  initial #25: no-value-use
  initial #19: no-value-use
 visit #25: Checkpoint (trunc: no-value-use)
  initial #27: no-truncation (but distinguish zeros)
  initial #8: no-value-use
  initial #19: no-value-use
 visit #27: FrameState (trunc: no-truncation (but distinguish zeros))
  initial #9: no-truncation (but distinguish zeros)
  initial #26: no-truncation (but distinguish zeros)
  initial #24: no-truncation (but distinguish zeros)
  initial #4: no-truncation (but distinguish zeros)
  initial #76: no-truncation (but distinguish zeros)
  initial #0: no-truncation (but distinguish zeros)
 visit #26: StateValues (trunc: no-truncation (but distinguish zeros))
  initial #23: no-truncation (but distinguish zeros)
 visit #24: Phi (trunc: no-truncation (but distinguish zeros))
  initial #15: no-truncation (but distinguish zeros)
  initial #22: no-truncation (but distinguish zeros)
  initial #19: no-value-use
 visit #22: NumberConstant (trunc: no-truncation (but distinguish zeros))
 visit #15: NumberConstant (trunc: no-truncation (but distinguish zeros))
 visit #23: Phi (trunc: no-truncation (but distinguish zeros))
  initial #14: no-truncation (but distinguish zeros)
  initial #21: no-truncation (but distinguish zeros)
  initial #19: no-value-use
 visit #19: Merge (trunc: no-value-use)
  initial #18: no-value-use
  initial #20: no-value-use
 visit #20: IfTrue (trunc: no-value-use)
  initial #17: no-value-use
 visit #18: IfFalse (trunc: no-value-use)
  initial #17: no-value-use
 visit #17: Branch (trunc: no-value-use)
  initial #16: truncate-to-bool
  initial #8: no-value-use
 visit #8: JSStackCheck (trunc: no-value-use)
  initial #6: no-truncation (but distinguish zeros)
  initial #13: no-truncation (but distinguish zeros)
  initial #0: no-truncation (but distinguish zeros)
  initial #0: no-truncation (but distinguish zeros)
 visit #13: FrameState (trunc: no-truncation (but distinguish zeros))
  initial #9: no-truncation (but distinguish zeros)
  initial #10: no-truncation (but distinguish zeros)
  initial #11: no-truncation (but distinguish zeros)
  initial #4: no-truncation (but distinguish zeros)
  initial #76: no-truncation (but distinguish zeros)
  initial #0: no-truncation (but distinguish zeros)
 visit #76: HeapConstant (trunc: no-truncation (but distinguish zeros))
 visit #4: Parameter (trunc: no-truncation (but distinguish zeros))
  initial #0: no-truncation (but distinguish zeros)
 visit #11: HeapConstant (trunc: no-truncation (but distinguish zeros))
 visit #10: StateValues (trunc: no-truncation (but distinguish zeros))
 visit #9: StateValues (trunc: no-truncation (but distinguish zeros))
  initial #1: no-truncation (but distinguish zeros)
  initial #2: no-truncation (but distinguish zeros)
 visit #1: Parameter (trunc: no-truncation (but distinguish zeros))
  initial #0: no-truncation (but distinguish zeros)
 visit #6: HeapConstant (trunc: no-truncation (but distinguish zeros))
 visit #16: ToBoolean (trunc: truncate-to-bool)
  initial #2: no-truncation (but distinguish zeros)
 visit #2: Parameter (trunc: no-truncation (but distinguish zeros))
  initial #0: no-truncation (but distinguish zeros)
 visit #0: Start (trunc: no-truncation (but distinguish zeros))
 visit #21: NumberConstant (trunc: no-truncation (but distinguish zeros))
 visit #14: NumberConstant (trunc: no-truncation (but distinguish zeros))
 visit #94: HeapConstant (trunc: truncate-to-word32)
 visit #59: NumberConstant (trunc: no-truncation (but distinguish zeros))
--{Retype phase}--
 visit #59: NumberConstant
  ==> output kRepTaggedSigned
 visit #94: HeapConstant
  ==> output kRepTaggedPointer
 visit #14: NumberConstant
  ==> output kRepTagged
 visit #21: NumberConstant
  ==> output kRepTaggedSigned
 visit #0: Start
  ==> output kRepTagged
 visit #2: Parameter
  ==> output kRepTagged
 visit #16: ToBoolean
  ==> output kRepBit
 visit #6: HeapConstant
  ==> output kRepTaggedPointer
 visit #1: Parameter
  ==> output kRepTagged
 visit #9: StateValues
  ==> output kRepTagged
 visit #10: StateValues
  ==> output kRepTagged
 visit #11: HeapConstant
  ==> output kRepTaggedPointer
 visit #4: Parameter
  ==> output kRepTagged
 visit #76: HeapConstant
  ==> output kRepTaggedPointer
 visit #13: FrameState
  ==> output kRepTagged
 visit #8: JSStackCheck
  ==> output kRepTagged
 visit #17: Branch
  ==> output kMachNone
 visit #18: IfFalse
  ==> output kRepTagged
 visit #20: IfTrue
  ==> output kRepTagged
 visit #19: Merge
  ==> output kRepTagged
#23:Phi[kRepTagged](#14:NumberConstant, #21:NumberConstant, #19:Merge)  [Static type: (MinusZero | Range(-1, -1))]
 visit #23: Phi
  ==> output kRepFloat64
 visit #15: NumberConstant
  ==> output kRepTagged
 visit #22: NumberConstant
  ==> output kRepTaggedSigned
#24:Phi[kRepTagged](#15:NumberConstant, #22:NumberConstant, #19:Merge)  [Static type: Range(-2147483648, 1)]
 visit #24: Phi
  ==> output kRepWord32
 visit #26: StateValues
  ==> output kRepTagged
 visit #27: FrameState
  ==> output kRepTagged
 visit #25: Checkpoint
  ==> output kRepTagged
#28:SpeculativeSafeIntegerSubtract[SignedSmall](#23:Phi, #24:Phi, #25:Checkpoint, #19:Merge)  [Static type: (MinusZero | Range(-2, 2147483648)), Feedback type: Range(-2, 2147483647)]
 visit #28: SpeculativeSafeIntegerSubtract
  ==> output kRepWord32
 visit #29: SpeculativeNumberEqual
  ==> output kRepBit
 visit #77: HeapConstant
  ==> output kRepTaggedPointer
 visit #78: LoadField
  ==> output kRepTaggedPointer
 visit #79: LoadField
  ==> output kRepTagged
 visit #80: HeapConstant
  ==> output kRepTaggedPointer
 visit #81: ReferenceEqual
  ==> output kRepBit
 visit #82: CheckIf
  ==> output kMachNone
#83:SpeculativeToNumber[NumberOrOddball, FeedbackSource(#6)](#29:SpeculativeNumberEqual, #82:CheckIf, #19:Merge)  [Static type: Range(0, 0)]
 visit #83: SpeculativeToNumber
  ==> output kRepFloat64
#89:SpeculativeToNumber[NumberOrOddball, FeedbackSource(#9)](#29:SpeculativeNumberEqual, #83:SpeculativeToNumber, #19:Merge)  [Static type: Range(0, 0)]
 visit #89: SpeculativeToNumber
  ==> output kRepFloat64
#64:SpeculativeNumberBitwiseOr[NumberOrOddball](#94:HeapConstant, #59:NumberConstant, #89:SpeculativeToNumber, #19:Merge)  [Static type: Range(0, 0)]
 visit #64: SpeculativeNumberBitwiseOr
  ==> output kRepWord32
 visit #92: Return
  ==> output kRepTagged
 visit #73: End
  ==> output kRepTagged
--{Lower phase}--
 visit #59: NumberConstant
defer replacement #59:NumberConstant with #100:Int64Constant
 visit #94: HeapConstant
 visit #14: NumberConstant
 visit #21: NumberConstant
defer replacement #21:NumberConstant with #101:Int64Constant
 visit #0: Start
 visit #2: Parameter
 visit #16: ToBoolean
  change: #16:ToBoolean(@0 #2:Parameter) from kRepTagged to kRepBit:truncate-to-bool
defer replacement #16:ToBoolean with #102:TruncateTaggedToBit
 visit #6: HeapConstant
 visit #1: Parameter
 visit #9: StateValues
 visit #10: StateValues
 visit #11: HeapConstant
 visit #4: Parameter
 visit #76: HeapConstant
 visit #13: FrameState
  change: #13:FrameState(@4 #76:HeapConstant) from kRepTaggedPointer to kRepTagged:no-truncation (but distinguish zeros)
 visit #8: JSStackCheck
  change: #8:JSStackCheck(@0 #6:HeapConstant) from kRepTaggedPointer to kRepTagged:no-truncation (but distinguish zeros)
 visit #17: Branch
 visit #18: IfFalse
 visit #20: IfTrue
 visit #19: Merge
 visit #23: Phi
  change: #23:Phi(@0 #14:NumberConstant) from kRepTagged to kRepFloat64:no-truncation (but distinguish zeros)
  change: #23:Phi(@1 #21:NumberConstant) from kRepTaggedSigned to kRepFloat64:no-truncation (but distinguish zeros)
 visit #15: NumberConstant
 visit #22: NumberConstant
defer replacement #22:NumberConstant with #106:Int64Constant
 visit #24: Phi
  change: #24:Phi(@0 #15:NumberConstant) from kRepTagged to kRepWord32:no-truncation (but distinguish zeros)
  change: #24:Phi(@1 #22:NumberConstant) from kRepTaggedSigned to kRepWord32:no-truncation (but distinguish zeros)
 visit #26: StateValues
 visit #27: FrameState
  change: #27:FrameState(@4 #76:HeapConstant) from kRepTaggedPointer to kRepTagged:no-truncation (but distinguish zeros)
 visit #25: Checkpoint
 visit #28: SpeculativeSafeIntegerSubtract
  change: #28:SpeculativeSafeIntegerSubtract(@0 #23:Phi) from kRepFloat64 to kRepWord32:no-truncation (but identify zeros)
  change: #28:SpeculativeSafeIntegerSubtract(@1 #24:Phi) from kRepWord32 to kRepWord32:no-truncation (but identify zeros)
kSpeculativeSafeIntegerSubtract: 
  left.Max(): -1
  left.Min(): -1
  right.Max(): 1
  right.Min(): -2.14748e+09
  kMaxInt: 2147483647
  kMinInt: -2147483648
  left.Max() - right.Min(): 2147483647
  left.Min() - right.Max(): -2
 visit #29: SpeculativeNumberEqual
  change: #29:SpeculativeNumberEqual(@1 #15:NumberConstant) from kRepTagged to kRepWord32:truncate-to-word32
 visit #77: HeapConstant
 visit #78: LoadField
  change: #78:LoadField(@0 #77:HeapConstant) from kRepTaggedPointer to kRepTagged:no-truncation (but distinguish zeros)
 visit #79: LoadField
  change: #79:LoadField(@0 #78:LoadField) from kRepTaggedPointer to kRepTagged:no-truncation (but distinguish zeros)
 visit #80: HeapConstant
 visit #81: ReferenceEqual
  change: #81:ReferenceEqual(@1 #80:HeapConstant) from kRepTaggedPointer to kRepTagged:no-truncation (but distinguish zeros)
 visit #82: CheckIf
 visit #83: SpeculativeToNumber
  change: #83:SpeculativeToNumber(@0 #29:Word32Equal) from kRepBit to kRepFloat64:no-truncation (but distinguish zeros)
defer replacement #83:SpeculativeToNumber with #111:ChangeUint32ToFloat64
 visit #89: SpeculativeToNumber
  change: #89:SpeculativeToNumber(@0 #29:Word32Equal) from kRepBit to kRepFloat64:no-truncation (but distinguish zeros)
defer replacement #89:SpeculativeToNumber with #112:ChangeUint32ToFloat64
 visit #64: SpeculativeNumberBitwiseOr
  change: #64:SpeculativeNumberBitwiseOr(@0 #94:HeapConstant) from kRepTaggedPointer to kRepWord32:truncate-to-word32
  change: #64:SpeculativeNumberBitwiseOr(@1 #59:NumberConstant) from kRepTaggedSigned to kRepWord32:truncate-to-word32
 visit #92: Return
  change: #92:Return(@0 #59:NumberConstant) from kRepTaggedSigned to kRepWord32:truncate-to-word32
  change: #92:Return(@1 #59:NumberConstant) from kRepTaggedSigned to kRepTagged:no-truncation (but distinguish zeros)
 visit #73: End
---------------------------------------------------
Finished compiling method hot using TurboFan
