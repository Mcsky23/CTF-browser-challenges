Concurrent recompilation has been disabled for tracing.
0
[manually marking 0x30b9082d0c49 <JSFunction hot (sfi = 0x30b9082d0a85)> for non-concurrent optimization]
[compiling method 0x30b9082d0c49 <JSFunction hot (sfi = 0x30b9082d0a85)> (target TURBOFAN) using TurboFan]
---------------------------------------------------
Begin compiling method hot using TurboFan
--{Propagate phase}--
 visit #82: End (trunc: no-value-use)
  initial #100: no-value-use
  initial #101: no-value-use
 visit #101: Return (trunc: no-value-use)
  initial #68: truncate-to-word32
  initial #93: no-truncation (but distinguish zeros)
  initial #73: no-value-use
  initial #76: no-value-use
 visit #76: IfTrue (trunc: no-value-use)
  initial #75: no-value-use
 visit #93: NumberSign (trunc: no-truncation (but distinguish zeros))
  initial #92: truncate-to-word32
 visit #100: Return (trunc: no-value-use)
  initial #68: truncate-to-word32
  initial #68: no-truncation (but distinguish zeros)
  initial #73: no-value-use
  initial #78: no-value-use
 visit #78: IfFalse (trunc: no-value-use)
  initial #75: no-value-use
 visit #75: Branch (trunc: no-value-use)
  initial #107: truncate-to-bool
  initial #33: no-value-use
 visit #107: NumberEqual (trunc: truncate-to-bool)
  initial #73: truncate-to-word32
  initial #68: no-truncation (but distinguish zeros)
 visit #73: SpeculativeNumberBitwiseOr (trunc: truncate-to-word32)
  initial #106: truncate-to-word32
  initial #68: no-truncation (but distinguish zeros)
  initial #98: no-value-use
  initial #33: no-value-use
 visit #106: NumberLessThan (trunc: truncate-to-word32)
  initial #99: truncate-to-word32
  initial #68: no-truncation (but distinguish zeros)
 visit #99: NumberSign (trunc: truncate-to-word32)
  initial #98: truncate-to-word32
 visit #98: SpeculativeToNumber (trunc: truncate-to-word32)
  initial #36: no-truncation (but distinguish zeros)
  initial #92: truncate-to-word32
  initial #33: no-value-use
 visit #92: SpeculativeToNumber (trunc: truncate-to-word32)
  initial #36: no-truncation (but distinguish zeros)
  initial #91: no-value-use
  initial #33: no-value-use
 visit #91: CheckIf (trunc: no-value-use)
  initial #90: truncate-to-bool
  initial #88: no-value-use
  initial #33: no-value-use
 visit #90: ReferenceEqual (trunc: truncate-to-bool)
  initial #88: no-truncation (but distinguish zeros)
  initial #89: no-truncation (but distinguish zeros)
 visit #89: HeapConstant (trunc: no-truncation (but distinguish zeros))
 visit #88: LoadField (trunc: no-truncation (but distinguish zeros))
  initial #87: no-truncation (but distinguish zeros)
  initial #87: no-truncation (but distinguish zeros)
  initial #33: no-value-use
 visit #87: LoadField (trunc: no-truncation (but distinguish zeros))
  initial #86: no-truncation (but distinguish zeros)
  initial #29: no-value-use
  initial #33: no-value-use
 visit #86: HeapConstant (trunc: no-truncation (but distinguish zeros))
 visit #36: Phi (trunc: no-truncation (but distinguish zeros))
  initial #29: no-truncation (but distinguish zeros)
  initial #35: no-truncation (but distinguish zeros)
  initial #33: no-value-use
 visit #33: Merge (trunc: no-value-use)
  initial #32: no-value-use
  initial #34: no-value-use
 visit #34: IfTrue (trunc: no-value-use)
  initial #31: no-value-use
 visit #32: IfFalse (trunc: no-value-use)
  initial #31: no-value-use
 visit #31: Branch (trunc: no-value-use)
  initial #110: truncate-to-bool
  initial #19: no-value-use
 visit #110: Phi (trunc: truncate-to-bool)
  initial #103: truncate-to-bool
  initial #102: truncate-to-bool
  initial #19: no-value-use
 visit #102: HeapConstant (trunc: truncate-to-bool)
 visit #103: HeapConstant (trunc: truncate-to-bool)
 visit #35: NumberConstant (trunc: no-truncation (but distinguish zeros))
 visit #29: SpeculativeNumberEqual (trunc: no-truncation (but distinguish zeros))
  initial #28: no-truncation (but identify zeros)
  initial #15: no-truncation (but identify zeros)
  initial #28: no-truncation (but identify zeros)
  initial #19: no-value-use
 visit #28: SpeculativeSafeIntegerSubtract (trunc: no-truncation (but identify zeros))
  initial #23: no-truncation (but identify zeros)
  initial #24: no-truncation (but identify zeros)
  initial #25: no-value-use
  initial #19: no-value-use
 visit #25: Checkpoint (trunc: no-value-use)
  initial #27: no-truncation (but distinguish zeros)
  initial #8: no-value-use
  initial #19: no-value-use
 visit #27: FrameState (trunc: no-truncation (but distinguish zeros))
  initial #9: no-truncation (but distinguish zeros)
  initial #26: no-truncation (but distinguish zeros)
  initial #24: no-truncation (but distinguish zeros)
  initial #4: no-truncation (but distinguish zeros)
  initial #85: no-truncation (but distinguish zeros)
  initial #0: no-truncation (but distinguish zeros)
 visit #26: StateValues (trunc: no-truncation (but distinguish zeros))
  initial #23: no-truncation (but distinguish zeros)
 visit #24: Phi (trunc: no-truncation (but distinguish zeros))
  initial #15: no-truncation (but distinguish zeros)
  initial #22: no-truncation (but distinguish zeros)
  initial #19: no-value-use
 visit #22: NumberConstant (trunc: no-truncation (but distinguish zeros))
 visit #15: NumberConstant (trunc: no-truncation (but distinguish zeros))
 visit #23: Phi (trunc: no-truncation (but distinguish zeros))
  initial #14: no-truncation (but distinguish zeros)
  initial #21: no-truncation (but distinguish zeros)
  initial #19: no-value-use
 visit #19: Merge (trunc: no-value-use)
  initial #18: no-value-use
  initial #20: no-value-use
 visit #20: IfTrue (trunc: no-value-use)
  initial #17: no-value-use
 visit #18: IfFalse (trunc: no-value-use)
  initial #17: no-value-use
 visit #17: Branch (trunc: no-value-use)
  initial #16: truncate-to-bool
  initial #8: no-value-use
 visit #8: JSStackCheck (trunc: no-value-use)
  initial #6: no-truncation (but distinguish zeros)
  initial #13: no-truncation (but distinguish zeros)
  initial #0: no-truncation (but distinguish zeros)
  initial #0: no-truncation (but distinguish zeros)
 visit #13: FrameState (trunc: no-truncation (but distinguish zeros))
  initial #9: no-truncation (but distinguish zeros)
  initial #10: no-truncation (but distinguish zeros)
  initial #11: no-truncation (but distinguish zeros)
  initial #4: no-truncation (but distinguish zeros)
  initial #85: no-truncation (but distinguish zeros)
  initial #0: no-truncation (but distinguish zeros)
 visit #85: HeapConstant (trunc: no-truncation (but distinguish zeros))
 visit #4: Parameter (trunc: no-truncation (but distinguish zeros))
  initial #0: no-truncation (but distinguish zeros)
 visit #11: HeapConstant (trunc: no-truncation (but distinguish zeros))
 visit #10: StateValues (trunc: no-truncation (but distinguish zeros))
 visit #9: StateValues (trunc: no-truncation (but distinguish zeros))
  initial #1: no-truncation (but distinguish zeros)
  initial #2: no-truncation (but distinguish zeros)
 visit #1: Parameter (trunc: no-truncation (but distinguish zeros))
  initial #0: no-truncation (but distinguish zeros)
 visit #6: HeapConstant (trunc: no-truncation (but distinguish zeros))
 visit #16: ToBoolean (trunc: truncate-to-bool)
  initial #2: no-truncation (but distinguish zeros)
 visit #2: Parameter (trunc: no-truncation (but distinguish zeros))
  initial #0: no-truncation (but distinguish zeros)
 visit #0: Start (trunc: no-truncation (but distinguish zeros))
 visit #21: NumberConstant (trunc: no-truncation (but distinguish zeros))
 visit #14: NumberConstant (trunc: no-truncation (but distinguish zeros))
 visit #68: NumberConstant (trunc: no-truncation (but distinguish zeros))
--{Retype phase}--
 visit #68: NumberConstant
  ==> output kRepTaggedSigned
 visit #14: NumberConstant
  ==> output kRepTagged
 visit #21: NumberConstant
  ==> output kRepTaggedSigned
 visit #0: Start
  ==> output kRepTagged
 visit #2: Parameter
  ==> output kRepTagged
 visit #16: ToBoolean
  ==> output kRepBit
 visit #6: HeapConstant
  ==> output kRepTaggedPointer
 visit #1: Parameter
  ==> output kRepTagged
 visit #9: StateValues
  ==> output kRepTagged
 visit #10: StateValues
  ==> output kRepTagged
 visit #11: HeapConstant
  ==> output kRepTaggedPointer
 visit #4: Parameter
  ==> output kRepTagged
 visit #85: HeapConstant
  ==> output kRepTaggedPointer
 visit #13: FrameState
  ==> output kRepTagged
 visit #8: JSStackCheck
  ==> output kRepTagged
 visit #17: Branch
  ==> output kMachNone
 visit #18: IfFalse
  ==> output kRepTagged
 visit #20: IfTrue
  ==> output kRepTagged
 visit #19: Merge
  ==> output kRepTagged
#23:Phi[kRepTagged](#14:NumberConstant, #21:NumberConstant, #19:Merge)  [Static type: (MinusZero | Range(-1, -1))]
 visit #23: Phi
  ==> output kRepFloat64
 visit #15: NumberConstant
  ==> output kRepTagged
 visit #22: NumberConstant
  ==> output kRepTaggedSigned
#24:Phi[kRepTagged](#15:NumberConstant, #22:NumberConstant, #19:Merge)  [Static type: Range(-2147483648, 1)]
 visit #24: Phi
  ==> output kRepWord32
 visit #26: StateValues
  ==> output kRepTagged
 visit #27: FrameState
  ==> output kRepTagged
 visit #25: Checkpoint
  ==> output kRepTagged
#28:SpeculativeSafeIntegerSubtract[SignedSmall](#23:Phi, #24:Phi, #25:Checkpoint, #19:Merge)  [Static type: (MinusZero | Range(-2, 2147483648)), Feedback type: Range(-2, 2147483647)]
 visit #28: SpeculativeSafeIntegerSubtract
  ==> output kRepWord32
 visit #29: SpeculativeNumberEqual
  ==> output kRepBit
 visit #35: NumberConstant
  ==> output kRepTaggedSigned
 visit #103: HeapConstant
  ==> output kRepTaggedPointer
 visit #102: HeapConstant
  ==> output kRepTaggedPointer
#110:Phi[kRepTagged](#103:HeapConstant, #102:HeapConstant, #19:Merge)  [Static type: (None | HeapConstant(0x6242df1841a0 {0x30b9080424cd <false>}) | HeapConstant(0x6242df1841b8 {0x30b90804248d <true>}))]
 visit #110: Phi
  ==> output kRepBit
 visit #31: Branch
  ==> output kMachNone
 visit #32: IfFalse
  ==> output kRepTagged
 visit #34: IfTrue
  ==> output kRepTagged
 visit #33: Merge
  ==> output kRepTagged
#36:Phi[kRepTagged](#29:SpeculativeNumberEqual, #35:NumberConstant, #33:Merge)  [Static type: (None | Range(-4919, -4919) | HeapConstant(0x6242df1841a0 {0x30b9080424cd <false>}))]
 visit #36: Phi
  ==> output kRepTagged
 visit #86: HeapConstant
  ==> output kRepTaggedPointer
 visit #87: LoadField
  ==> output kRepTaggedPointer
 visit #88: LoadField
  ==> output kRepTagged
 visit #89: HeapConstant
  ==> output kRepTaggedPointer
 visit #90: ReferenceEqual
  ==> output kRepBit
 visit #91: CheckIf
  ==> output kMachNone
#92:SpeculativeToNumber[NumberOrOddball, FeedbackSource(#6)](#36:Phi, #91:CheckIf, #33:Merge)  [Static type: Range(-4919, 0)]
 visit #92: SpeculativeToNumber
  ==> output kRepFloat64
#98:SpeculativeToNumber[NumberOrOddball, FeedbackSource(#9)](#36:Phi, #92:SpeculativeToNumber, #33:Merge)  [Static type: Range(-4919, 0)]
 visit #98: SpeculativeToNumber
  ==> output kRepFloat64
#99:NumberSign(#98:SpeculativeToNumber)  [Static type: Range(-1, 0)]
 visit #99: NumberSign
  ==> output kRepWord32
 visit #106: NumberLessThan
  ==> output kRepBit
#73:SpeculativeNumberBitwiseOr[NumberOrOddball](#106:NumberLessThan, #68:NumberConstant, #98:SpeculativeToNumber, #33:Merge)  [Static type: Range(0, 1)]
 visit #73: SpeculativeNumberBitwiseOr
  ==> output kRepWord32
 visit #107: NumberEqual
  ==> output kRepBit
 visit #75: Branch
  ==> output kMachNone
 visit #78: IfFalse
  ==> output kRepTagged
 visit #100: Return
  ==> output kRepTagged
#93:NumberSign(#92:SpeculativeToNumber)  [Static type: Range(-1, 0)]
 visit #93: NumberSign
  ==> output kRepWord32
 visit #76: IfTrue
  ==> output kRepTagged
 visit #101: Return
  ==> output kRepTagged
 visit #82: End
  ==> output kRepTagged
--{Lower phase}--
 visit #68: NumberConstant
defer replacement #68:NumberConstant with #111:Int64Constant
 visit #14: NumberConstant
 visit #21: NumberConstant
defer replacement #21:NumberConstant with #112:Int64Constant
 visit #0: Start
 visit #2: Parameter
 visit #16: ToBoolean
  change: #16:ToBoolean(@0 #2:Parameter) from kRepTagged to kRepBit:truncate-to-bool
defer replacement #16:ToBoolean with #113:TruncateTaggedToBit
 visit #6: HeapConstant
 visit #1: Parameter
 visit #9: StateValues
 visit #10: StateValues
 visit #11: HeapConstant
 visit #4: Parameter
 visit #85: HeapConstant
 visit #13: FrameState
  change: #13:FrameState(@4 #85:HeapConstant) from kRepTaggedPointer to kRepTagged:no-truncation (but distinguish zeros)
 visit #8: JSStackCheck
  change: #8:JSStackCheck(@0 #6:HeapConstant) from kRepTaggedPointer to kRepTagged:no-truncation (but distinguish zeros)
 visit #17: Branch
 visit #18: IfFalse
 visit #20: IfTrue
 visit #19: Merge
 visit #23: Phi
  change: #23:Phi(@0 #14:NumberConstant) from kRepTagged to kRepFloat64:no-truncation (but distinguish zeros)
  change: #23:Phi(@1 #21:NumberConstant) from kRepTaggedSigned to kRepFloat64:no-truncation (but distinguish zeros)
 visit #15: NumberConstant
 visit #22: NumberConstant
defer replacement #22:NumberConstant with #117:Int64Constant
 visit #24: Phi
  change: #24:Phi(@0 #15:NumberConstant) from kRepTagged to kRepWord32:no-truncation (but distinguish zeros)
  change: #24:Phi(@1 #22:NumberConstant) from kRepTaggedSigned to kRepWord32:no-truncation (but distinguish zeros)
 visit #26: StateValues
 visit #27: FrameState
  change: #27:FrameState(@4 #85:HeapConstant) from kRepTaggedPointer to kRepTagged:no-truncation (but distinguish zeros)
 visit #25: Checkpoint
 visit #28: SpeculativeSafeIntegerSubtract
  change: #28:SpeculativeSafeIntegerSubtract(@0 #23:Phi) from kRepFloat64 to kRepWord32:no-truncation (but identify zeros)
  change: #28:SpeculativeSafeIntegerSubtract(@1 #24:Phi) from kRepWord32 to kRepWord32:no-truncation (but identify zeros)
kSpeculativeSafeIntegerSubtract: 
  left.Max(): -1
  left.Min(): -1
  right.Max(): 1
  right.Min(): -2.14748e+09
  kMaxInt: 2147483647
  kMinInt: -2147483648
  left.Max() - right.Min(): 2147483647
  left.Min() - right.Max(): -2
 visit #29: SpeculativeNumberEqual
  change: #29:SpeculativeNumberEqual(@1 #15:NumberConstant) from kRepTagged to kRepWord32:truncate-to-word32
 visit #35: NumberConstant
defer replacement #35:NumberConstant with #122:Int64Constant
 visit #103: HeapConstant
 visit #102: HeapConstant
 visit #110: Phi
  change: #110:Phi(@0 #103:HeapConstant) from kRepTaggedPointer to kRepBit:truncate-to-bool
  change: #110:Phi(@1 #102:HeapConstant) from kRepTaggedPointer to kRepBit:truncate-to-bool
 visit #31: Branch
 visit #32: IfFalse
 visit #34: IfTrue
 visit #33: Merge
 visit #36: Phi
  change: #36:Phi(@0 #29:Word32Equal) from kRepBit to kRepTagged:no-truncation (but distinguish zeros)
  change: #36:Phi(@1 #35:NumberConstant) from kRepTaggedSigned to kRepTagged:no-truncation (but distinguish zeros)
 visit #86: HeapConstant
 visit #87: LoadField
  change: #87:LoadField(@0 #86:HeapConstant) from kRepTaggedPointer to kRepTagged:no-truncation (but distinguish zeros)
 visit #88: LoadField
  change: #88:LoadField(@0 #87:LoadField) from kRepTaggedPointer to kRepTagged:no-truncation (but distinguish zeros)
 visit #89: HeapConstant
 visit #90: ReferenceEqual
  change: #90:ReferenceEqual(@1 #89:HeapConstant) from kRepTaggedPointer to kRepTagged:no-truncation (but distinguish zeros)
 visit #91: CheckIf
 visit #92: SpeculativeToNumber
  change: #92:SpeculativeToNumber(@0 #36:Phi) from kRepTagged to kRepFloat64:no-truncation (but distinguish zeros)
defer replacement #92:SpeculativeToNumber with #125:CheckedTaggedToFloat64
 visit #98: SpeculativeToNumber
  change: #98:SpeculativeToNumber(@0 #36:Phi) from kRepTagged to kRepFloat64:no-truncation (but distinguish zeros)
defer replacement #98:SpeculativeToNumber with #126:CheckedTaggedToFloat64
 visit #99: NumberSign
  change: #99:NumberSign(@0 #98:SpeculativeToNumber) from kRepFloat64 to kRepWord32:truncate-to-word32
defer replacement #99:NumberSign with #132:Select
 visit #106: NumberLessThan
  change: #106:NumberLessThan(@1 #68:NumberConstant) from kRepTaggedSigned to kRepWord32:truncate-to-word32
 visit #73: SpeculativeNumberBitwiseOr
  change: #73:SpeculativeNumberBitwiseOr(@0 #106:Int32LessThan) from kRepBit to kRepWord32:truncate-to-word32
  change: #73:SpeculativeNumberBitwiseOr(@1 #68:NumberConstant) from kRepTaggedSigned to kRepWord32:truncate-to-word32
 visit #107: NumberEqual
  change: #107:NumberEqual(@1 #68:NumberConstant) from kRepTaggedSigned to kRepWord32:truncate-to-word32
 visit #75: Branch
 visit #78: IfFalse
 visit #100: Return
  change: #100:Return(@0 #68:NumberConstant) from kRepTaggedSigned to kRepWord32:truncate-to-word32
  change: #100:Return(@1 #68:NumberConstant) from kRepTaggedSigned to kRepTagged:no-truncation (but distinguish zeros)
 visit #93: NumberSign
  change: #93:NumberSign(@0 #92:SpeculativeToNumber) from kRepFloat64 to kRepWord32:truncate-to-word32
defer replacement #93:NumberSign with #137:Select
 visit #76: IfTrue
 visit #101: Return
  change: #101:Return(@0 #68:NumberConstant) from kRepTaggedSigned to kRepWord32:truncate-to-word32
  change: #101:Return(@1 #93:NumberSign) from kRepWord32 to kRepTagged:no-truncation (but distinguish zeros)
 visit #82: End
---------------------------------------------------
Finished compiling method hot using TurboFan
